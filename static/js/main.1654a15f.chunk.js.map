{"version":3,"sources":["pages/Home/index.tsx","pages/Start/index.tsx","routes.tsx","App.tsx","serviceWorker.ts","index.tsx","assets/hand.jpg"],"names":["Home","to","id","className","src","hand","alt","webcamElement","document","getElementById","window","height","innerWidth","innerHeight","addEventListener","outerHeight","Start","audio","videoConstraints","facingMode","Routes","basename","component","path","exact","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"iUA2BeA,EArBF,WACT,OACI,kBAAC,IAAD,CAAMC,GAAG,UACL,yBAAKC,GAAG,QACJ,yBAAKC,UAAU,cACX,yBAAKC,IAAKC,IAAMC,IAAI,OAAOH,UAAU,OAAOD,GAAG,aAC/C,yBAAKA,GAAG,SAAQ,8CAChB,yBAAKE,IAAKC,IAAMC,IAAI,OAAOH,UAAU,OAAOD,GAAG,iBAMnD,yBAAKC,UAAU,a,iBCdzBI,G,MAAoCC,SAASC,eAAe,WAClE,GAAGF,G,MAI8CG,OAAXC,G,EAAhCC,W,EAAmBC,aAMzBH,OAAOI,iBAAiB,UAJP,WACbH,EAASD,OAAOK,eAKpB,IAkBeC,EAlBD,WACV,OACI,yBAAKd,GAAG,SACJ,yBAAKC,UAAU,UACX,kBAAC,IAAD,CACIc,OAAO,EACPC,iBAAmB,CAACC,WAAY,WAChCR,OAAQA,KAIhB,yBAAKR,UAAU,QACX,4BAAKQ,MCfNS,EATA,WACX,OACI,kBAAC,IAAD,CAAeC,SAAS,eACxB,kBAAC,IAAD,CAAOC,UAAWtB,EAAMuB,KAAK,IAAIC,OAAK,IACtC,kBAAC,IAAD,CAAOF,UAAWN,EAAOO,KAAK,aCDvBE,MAJf,WACE,OAAO,kBAAC,EAAD,OCMWC,QACW,cAA7BhB,OAAOiB,SAASC,UAEe,UAA7BlB,OAAOiB,SAASC,UAEhBlB,OAAOiB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFxB,SAASC,eAAe,SDiIpB,kBAAmBwB,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,kBEjJ5BC,EAAOC,QAAU,IAA0B,mC","file":"static/js/main.1654a15f.chunk.js","sourcesContent":["import React from 'react';\r\nimport {Link} from 'react-router-dom'\r\n\r\nimport './styles.css'\r\nimport hand from '../../assets/hand.jpg'\r\n\r\nconst Home = () => {\r\n    return (\r\n        <Link to=\"/start\">\r\n            <div id=\"home\">\r\n                <div className=\"home-title\">\r\n                    <img src={hand} alt=\"Hand\" className=\"hand\" id=\"hand-top\"/>\r\n                    <div id=\"title\"><h1>Superf√≠cie</h1></div>\r\n                    <img src={hand} alt=\"Hand\" className=\"hand\" id=\"hand-bottom\"/>\r\n                </div>\r\n                {/*<div className=\"colors\">\r\n                    <div className=\"black-half\"></div>\r\n                    <div className=\"white-half\"></div>\r\n             </div>*/}\r\n                <div className=\"teste\">\r\n                </div>\r\n            </div>\r\n        </Link>\r\n        \r\n    );\r\n}\r\n\r\nexport default Home;","import React from 'react';\r\nimport Webcam from 'react-webcam';\r\n\r\nimport './styles.css'\r\n\r\nconst webcamElement: HTMLElement | null = document.getElementById(\"webcam\");\r\nif(webcamElement){\r\n    const webcamSize = webcamElement;\r\n}\r\n\r\nlet { innerWidth: width, innerHeight: height } = window;\r\n\r\nconst onresize = function() {\r\n    height = window.outerHeight;\r\n }\r\n\r\nwindow.addEventListener(\"resize\", onresize);\r\n\r\nconst Start = () => {\r\n    return (\r\n        <div id=\"start\">\r\n            <div className=\"webcam\">\r\n                <Webcam \r\n                    audio={false} \r\n                    videoConstraints={ {facingMode: 'userset'}}\r\n                    height={height}\r\n                    //width={720}\r\n                />\r\n            </div>\r\n            <div className='text'>\r\n                <h1>{height}</h1>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Start;","import React from 'react';\r\nimport { Route, BrowserRouter } from 'react-router-dom';\r\n\r\nimport Home from './pages/Home';\r\nimport Start from './pages/Start';\r\n\r\nconst Routes = () => {\r\n    return (\r\n        <BrowserRouter basename=\"/superficie\">\r\n        <Route component={Home} path=\"/\" exact />\r\n        <Route component={Start} path=\"/start\" />\r\n        </BrowserRouter>\r\n    );\r\n}\r\n\r\nexport default Routes;","import React from 'react';\nimport './App.css';\nimport Routes from './routes';\n\n\nfunction App() {\n  return <Routes />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/hand.98ab8955.jpg\";"],"sourceRoot":""}